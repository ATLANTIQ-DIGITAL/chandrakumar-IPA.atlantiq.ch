{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set filteredItems = [] %}
{% set mainElement = content.field_breiteres_element['#items'].0.value %}
{% set items = content.field_spalten['#items'] %}

{% for item in items %}
    {% set itemIsPublished = item.entity.isPublished() %}
    {% if itemIsPublished %}
        {% set filteredItems = filteredItems|merge([item]) %}
    {% endif %}
{% endfor %}

{% set elementCount = filteredItems|length %}
{% set hasTwoElements = (elementCount == 2) %}
{%
    set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not (paragraph.isPublished() and (elementCount > 0)) ? 'paragraph--unpublished m-0'
]
%}
{% set rowClass = hasTwoElements and mainElement ? ' row-cols-lg-3' : ' row-cols-lg-' ~ elementCount %}

{% block paragraph %}
    <div{{ attributes.addClass(classes) }}>
        <div class="row row-cols-1{{ rowClass }}">
            {% for item in filteredItems %}
                {% set paragraphEntity = item.entity %}

                {% if paragraphEntity.isPublished() %}
                    {% set textField = paragraphEntity.field_text %}
                    {% set imgField = paragraphEntity.field_image %}
                    {% set itemClass = hasTwoElements and loop.index == mainElement ? ' col-lg-8' : ' col' %}

                    {% if textField %}
                        {% set textContent = textField.0.value %}
                        {% set itemContent = {
                            '#type': 'markup',
                            '#markup': textContent,
                        } %}
                    {% elseif imgField %}
                        {% set imageContent = imgField.0.entity.field_media_image.0.entity.fileuri %}
                        {% set itemContent = {
                            '#theme':      'image_style',
                            '#style_name': 'large',
                            '#uri':        imageContent,
                            '#attributes': { class: 'img-fluid rounded w-100' },
                        } %}
                    {% endif %}

                    <div class="mb-3 mb-lg-0{{ itemClass }}">
                        {{ itemContent }}
                    </div>
                {% endif %}

            {% endfor %}
        </div>
    </div>
{% endblock paragraph %}
